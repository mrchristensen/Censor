# Defines AST nodes used for Open MP directives.
# This file is used to generate omp_ast.py the same way that
# pycparser uses _c_ast.cfg to generate c_ast.py
# following their conventions, each entry is a Node sub-class
# name, listing the attributes and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# to alter omp_ast.py, edit this file then
# run "python _gen_omp_nodes.py"


# clauses: each time a node has a member "clauses", it will be a list of
# strings containing the Omp clauses that are arguments to the given node

# TODO: it may be beneficial to implement some of the clauses as additional nodes

# block: on looking through the AST made by pycparser, each #pragma omp
# should be changed into an Omp node, and if the given Omp node has a "block"
# data member, the statement immediately after the #pragma in the AST should
# become "block" of the Omp node (thus block will often be a Compound node,
# but can also be a single statement)

# loops: a For loop node, which may have other For loops nested inside of it,
# called loops for consistency with the OMP specification

OmpParallel: [clauses, block*]

OmpFor: [clauses, loops*]

# here the AST should be rearranged so that the blocks following each
# "pragma omp section" appear in the sections list in the OmpSections node
OmpSections: [clauses, sections**]

OmpSection: [block*]

OmpSingle: [clauses, block*]

OmpSimd: [clauses, loops*]

OmpDeclareSimd: [clauses, func*]

OmpForSimd: [clauses, loops*]

OmpTask: [clauses, block*]

OmpTaskloop: [clauses, loops*]

OmpTaskloopSimd: [clauses, loops*]

OmpTaskyield: []

# TODO: add directives involving "omp target" or "omp distribute", or "omp teams"
# skipping for now so we can get the basics working first

# skipping all the ones that start with parrallel, because they are
# just shortcuts for other constructs

OmpMaster: [block*]

OmpCritical: [clauses, block*]

OmpBarrier: []

OmpTaskwait: []

OmpTaskgroup: [block*]

# seq_cst: Boolean
# atomic_clause: 'read', 'write', 'update', or 'capture'
OmpAtomic: [seq_cst, atomic_clause, block]

# id_list: list of ID Nodes, denoting which variables to flush
OmpFlush: [id_list**]

OmpOrdered: [clauses, block*]

# construct_type: 'parallel','sections','for', or 'taskgroup'
OmpCancel: [construct_type, if_clause]

OmpCancellationPoint: [construct_type]

OmpThreadprivate: [vars**]

OmpDeclareReduction: [reduction_id*, types**, combiner*, initializer]
