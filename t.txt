FileAST: 
  FuncDef: 
    Decl: main, [], [], []
      FuncDecl: 
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound: 
      Decl: m, [], [], []
        ArrayDecl: []
          ArrayDecl: []
            TypeDecl: m, []
              IdentifierType: ['int']
            Constant: int, 3
          Constant: int, 3
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 0
        Constant: int, 1
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 1
        Constant: int, 2
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 2
        Constant: int, 3
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 0
        Constant: int, 4
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 1
        Constant: int, 5
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 2
        Constant: int, 6
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 0
        Constant: int, 7
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 1
        Constant: int, 8
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 2
        Constant: int, 9
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: j, [], [], []
        TypeDecl: j, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: dim, [], [], []
        TypeDecl: dim, []
          IdentifierType: ['int']
        Constant: int, 3
      Decl: sum, [], [], []
        TypeDecl: sum, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: censor01, [], [], []
        PtrDecl: []
          TypeDecl: censor01, []
            IdentifierType: ['int']
      Label: outer
        Label: inner
          EmptyStatement: 
      Assignment: =
        ID: censor01
        ArrayRef: 
          ID: m
          ID: i
      Assignment: =
        ID: sum
        BinaryOp: +
          ID: sum
          ArrayRef: 
            ID: censor01
            ID: j
      Assignment: =
        ID: i
        BinaryOp: +
          ID: i
          Constant: int, 1
      If: 
        BinaryOp: <
          ID: i
          ID: dim
        Compound: 
          Goto: inner
      Assignment: =
        ID: i
        Constant: int, 0
      Assignment: =
        ID: j
        BinaryOp: +
          ID: j
          Constant: int, 1
      If: 
        BinaryOp: <
          ID: j
          ID: dim
        Compound: 
          Goto: outer
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "%d\n"
          ID: sum
      Return: 
        Constant: int, 0
--------------------------------------------
FileAST: 
  FuncDef: 
    Decl: main, [], [], []
      FuncDecl: 
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound: 
      Decl: censor15, [], [], []
        TypeDecl: censor15, []
          IdentifierType: ['int']
      Decl: m, [], [], []
        ArrayDecl: []
          ArrayDecl: []
            TypeDecl: m, []
              IdentifierType: ['int']
            Constant: int, 3
          Constant: int, 3
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 0
        Constant: int, 1
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 1
        Constant: int, 2
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 0
          Constant: int, 2
        Constant: int, 3
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 0
        Constant: int, 4
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 1
        Constant: int, 5
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 1
          Constant: int, 2
        Constant: int, 6
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 0
        Constant: int, 7
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 1
        Constant: int, 8
      Assignment: =
        ArrayRef: 
          ArrayRef: 
            ID: m
            Constant: int, 2
          Constant: int, 2
        Constant: int, 9
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: j, [], [], []
        TypeDecl: j, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: dim, [], [], []
        TypeDecl: dim, []
          IdentifierType: ['int']
        Constant: int, 3
      Decl: sum, [], [], []
        TypeDecl: sum, []
          IdentifierType: ['int']
        Constant: int, 0
      Decl: censor01, [], [], []
        PtrDecl: []
          TypeDecl: censor01, []
            IdentifierType: ['int']
      Label: outer
        Label: inner
          EmptyStatement: 
      Assignment: =
        ID: censor01
        Cast: 
          PtrDecl: []
            TypeDecl: None, []
              IdentifierType: ['int']
          ArrayRef: 
            ID: m
            ID: i
      Assignment: =
        ID: sum
        BinaryOp: +
          ID: sum
          ArrayRef: 
            ID: censor01
            ID: j
      Assignment: =
        ID: i
        BinaryOp: +
          ID: i
          Constant: int, 1
      Decl: censor12, [], [], []
        TypeDecl: censor12, []
          IdentifierType: ['int']
        BinaryOp: <
          ID: i
          ID: dim
      If: 
        ID: censor12
        Compound: 
          Goto: inner
      Assignment: =
        ID: i
        Constant: int, 0
      Assignment: =
        ID: j
        BinaryOp: +
          ID: j
          Constant: int, 1
      Decl: censor13, [], [], []
        TypeDecl: censor13, []
          IdentifierType: ['int']
        BinaryOp: <
          ID: j
          ID: dim
      If: 
        ID: censor13
        Compound: 
          Goto: outer
      FuncCall: 
        ID: printf
        ExprList: 
          Cast: 
            PtrDecl: []
              TypeDecl: None, ['const']
                IdentifierType: ['char']
            Constant: string, "%d\n"
          ID: sum
      Assignment: =
        ID: censor15
        Constant: int, 0
      Goto: censor14
      Label: censor14
        Return: 
          ID: censor15
